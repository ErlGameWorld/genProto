%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.8.0
-module(mytest).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("mytest.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type test() :: #test{}.

-type phoneNumber() :: #phoneNumber{}.

-type person() :: #person{}.

-type addressBook() :: #addressBook{}.

-type tint32() :: #tint32{}.

-export_type(['test'/0, 'phoneNumber'/0, 'person'/0, 'addressBook'/0, 'tint32'/0]).

-compile(export_all).

encode_int32(N) ->
   TT = #tint32{int1 = 1, int2 = -1, int3 = 128, int4 = -128, int5 = 65536,
      int6 = -65536, int7 = 2100000000, int8 = -2100000000, int9 = 678665, int10 = -678665},
   tt1(N, TT).

tt1(0, TT) ->
   ok;
tt1(N, TT) ->
   encode_msg(TT),
   tt1(N - 1, TT).

decode_int32(N) ->
   TT = #tint32{int1 = 1, int2 = -1, int3 = 128, int4 = -128, int5 = 65536,
      int6 = -65536, int7 = 2100000000, int8 = -2100000000, int9 = 678665, int10 = -678665},
   Bin = encode_msg(TT),
   tt2(N, Bin).

tt2(0, Bin) ->
   Bin;
tt2(N, Bin) ->
   decode_msg(Bin, tint32),
   tt2(N - 1, Bin).

encode_addressBook(N) ->
   Add = #addressBook{
      person1 = [
         #person{
            name = "Alice",
            integer = 10000,
            phone = [
               #phoneNumber{number = #test{aa = "123456789"}, type = 1},
               #phoneNumber{number = #test{aa = "87654321"}, type = 2}
            ]
         },
         #person{
            name = "Bob",
            integer = 20000,
            phone = [
               #phoneNumber{number = #test{aa = "01234567890"}, type = 3}
            ]
         }
      ]
   },
   tt3(N, Add).

tt3(0, Add) ->
   ok;
tt3(N, Add) ->
   encode_msg(Add),
   tt3(N - 1, Add).


decode_addressBook(N) ->
   AddressBook = #addressBook{
      person1 = [
         #person{
            name = "Alice",
            integer = 10000,
            phone = [
               #phoneNumber{number = #test{aa = "123456789"}, type = 1},
               #phoneNumber{number = #test{aa = "87654321"}, type = 2}
            ]
         },
         #person{
            name = "Bob",
            integer = 20000,
            phone = [
               #phoneNumber{number = #test{aa = "01234567890"}, type = 3}
            ]
         }
      ]
   },
   Bin = encode_msg(AddressBook),
   tt4(N, Bin).
tt4(0, Bin) ->
   Bin;
tt4(N, Bin) ->
   decode_msg(Bin, addressBook),
   tt4(N - 1, Bin).


-spec encode_msg(#test{} | #phoneNumber{} | #person{} | #addressBook{} | #tint32{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#test{} | #phoneNumber{} | #person{} | #addressBook{} | #tint32{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#test{} | #phoneNumber{} | #person{} | #addressBook{} | #tint32{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      test ->
	  encode_msg_test(id(Msg, TrUserData), TrUserData);
      phoneNumber ->
	  encode_msg_phoneNumber(id(Msg, TrUserData), TrUserData);
      person ->
	  encode_msg_person(id(Msg, TrUserData), TrUserData);
      addressBook ->
	  encode_msg_addressBook(id(Msg, TrUserData), TrUserData);
      tint32 ->
	  encode_msg_tint32(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_test(Msg, TrUserData) ->
    encode_msg_test(Msg, <<>>, TrUserData).


encode_msg_test(#test{aa = F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_phoneNumber(Msg, TrUserData) ->
    encode_msg_phoneNumber(Msg, <<>>, TrUserData).


encode_msg_phoneNumber(#phoneNumber{number = F1,
				    type = F2},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_phoneNumber_number(TrF1, <<Bin/binary, 10>>,
				       TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_person(Msg, TrUserData) ->
    encode_msg_person(Msg, <<>>, TrUserData).


encode_msg_person(#person{name = F1, integer = F2,
			  email = F3, phone = F4},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true -> e_field_person_phone(TrF4, B3, TrUserData)
      end
    end.

encode_msg_addressBook(Msg, TrUserData) ->
    encode_msg_addressBook(Msg, <<>>, TrUserData).


encode_msg_addressBook(#addressBook{person1 = F1,
				    others = F2},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_addressBook_person1(TrF1, Bin, TrUserData)
	   end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_addressBook_others(TrF2, B1, TrUserData)
      end
    end.

encode_msg_tint32(Msg, TrUserData) ->
    encode_msg_tint32(Msg, <<>>, TrUserData).


encode_msg_tint32(#tint32{int1 = F1, int2 = F2,
			  int3 = F3, int4 = F4, int5 = F5, int6 = F6, int7 = F7,
			  int8 = F8, int9 = F9, int10 = F10},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
	 end,
    B8 = begin
	   TrF8 = id(F8, TrUserData),
	   e_type_int32(TrF8, <<B7/binary, 64>>, TrUserData)
	 end,
    B9 = begin
	   TrF9 = id(F9, TrUserData),
	   e_type_int32(TrF9, <<B8/binary, 72>>, TrUserData)
	 end,
    begin
      TrF10 = id(F10, TrUserData),
      e_type_int32(TrF10, <<B9/binary, 80>>, TrUserData)
    end.

e_mfield_phoneNumber_number(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_test(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_person_phone(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_phoneNumber(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_person_phone([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_person_phone(id(Elem, TrUserData), Bin2,
				 TrUserData),
    e_field_person_phone(Rest, Bin3, TrUserData);
e_field_person_phone([], Bin, _TrUserData) -> Bin.

e_mfield_addressBook_person1(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_person(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_addressBook_person1([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_addressBook_person1(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_addressBook_person1(Rest, Bin3, TrUserData);
e_field_addressBook_person1([], Bin, _TrUserData) ->
    Bin.

e_mfield_addressBook_others(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_person(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_addressBook_others([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_addressBook_others(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_addressBook_others(Rest, Bin3, TrUserData);
e_field_addressBook_others([], Bin, _TrUserData) -> Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(test, Bin, TrUserData) ->
    id(decode_msg_test(Bin, TrUserData), TrUserData);
decode_msg_2_doit(phoneNumber, Bin, TrUserData) ->
    id(decode_msg_phoneNumber(Bin, TrUserData), TrUserData);
decode_msg_2_doit(person, Bin, TrUserData) ->
    id(decode_msg_person(Bin, TrUserData), TrUserData);
decode_msg_2_doit(addressBook, Bin, TrUserData) ->
    id(decode_msg_addressBook(Bin, TrUserData), TrUserData);
decode_msg_2_doit(tint32, Bin, TrUserData) ->
    id(decode_msg_tint32(Bin, TrUserData), TrUserData).



decode_msg_test(Bin, TrUserData) ->
    dfp_read_field_def_test(Bin, 0, 0,
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_test(<<10, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    d_field_test_aa(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_test(<<>>, 0, 0, F@_1, _) ->
    #test{aa = F@_1};
dfp_read_field_def_test(Other, Z1, Z2, F@_1,
			TrUserData) ->
    dg_read_field_def_test(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_test(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_test(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
dg_read_field_def_test(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_test_aa(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_test(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_test(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_test(Rest, 0, 0, F@_1,
					   TrUserData);
	    3 ->
		skip_group_test(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_test(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_test(<<>>, 0, 0, F@_1, _) ->
    #test{aa = F@_1}.

d_field_test_aa(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1,
		TrUserData)
    when N < 57 ->
    d_field_test_aa(Rest, N + 7, X bsl N + Acc, F@_1,
		    TrUserData);
d_field_test_aa(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_test(RestF, 0, 0, NewFValue,
			    TrUserData).

skip_varint_test(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, TrUserData) ->
    skip_varint_test(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_test(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, TrUserData) ->
    dfp_read_field_def_test(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_test(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_test(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
skip_length_delimited_test(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_test(Rest2, 0, 0, F@_1, TrUserData).

skip_group_test(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_test(Rest, 0, Z2, F@_1, TrUserData).

skip_32_test(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	     TrUserData) ->
    dfp_read_field_def_test(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_test(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	     TrUserData) ->
    dfp_read_field_def_test(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_phoneNumber(Bin, TrUserData) ->
    dfp_read_field_def_phoneNumber(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_phoneNumber(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_phoneNumber_number(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_phoneNumber(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_phoneNumber_type(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_phoneNumber(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #phoneNumber{number = F@_1, type = F@_2};
dfp_read_field_def_phoneNumber(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_phoneNumber(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_phoneNumber(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_phoneNumber(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_phoneNumber(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_phoneNumber_number(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      16 ->
	  d_field_phoneNumber_type(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_phoneNumber(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_phoneNumber(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_phoneNumber(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_phoneNumber(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_phoneNumber(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_phoneNumber(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #phoneNumber{number = F@_1, type = F@_2}.

d_field_phoneNumber_number(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_phoneNumber_number(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_phoneNumber_number(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_test(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_phoneNumber(RestF, 0, 0,
				   if Prev == undefined -> NewFValue;
				      true ->
					  merge_msg_test(Prev, NewFValue,
							 TrUserData)
				   end,
				   F@_2, TrUserData).

d_field_phoneNumber_type(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_phoneNumber_type(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_phoneNumber_type(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_phoneNumber(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_phoneNumber(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_phoneNumber(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_phoneNumber(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_phoneNumber(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_phoneNumber(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_phoneNumber(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_phoneNumber(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_phoneNumber(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_phoneNumber(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_phoneNumber(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_phoneNumber(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_phoneNumber(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_phoneNumber(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_phoneNumber(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

decode_msg_person(Bin, TrUserData) ->
    dfp_read_field_def_person(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), id([], TrUserData),
			      TrUserData).

dfp_read_field_def_person(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_person_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData);
dfp_read_field_def_person(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_person_integer(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
dfp_read_field_def_person(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_person_email(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_person(<<34, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_person_phone(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_person(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  R1, TrUserData) ->
    #person{name = F@_1, integer = F@_2, email = F@_3,
	    phone = lists_reverse(R1, TrUserData)};
dfp_read_field_def_person(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, TrUserData) ->
    dg_read_field_def_person(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData).

dg_read_field_def_person(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_person(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_person(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_person_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      TrUserData);
      16 ->
	  d_field_person_integer(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, TrUserData);
      26 ->
	  d_field_person_email(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      34 ->
	  d_field_person_phone(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_person(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
	    1 ->
		skip_64_person(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
	    2 ->
		skip_length_delimited_person(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_person(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
	    5 ->
		skip_32_person(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData)
	  end
    end;
dg_read_field_def_person(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 R1, TrUserData) ->
    #person{name = F@_1, integer = F@_2, email = F@_3,
	    phone = lists_reverse(R1, TrUserData)}.

d_field_person_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_person_name(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, TrUserData);
d_field_person_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_person(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, TrUserData).

d_field_person_integer(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_person_integer(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, TrUserData);
d_field_person_integer(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_person(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, TrUserData).

d_field_person_email(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_person_email(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_person_email(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_person(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, TrUserData).

d_field_person_phone(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_person_phone(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_person_phone(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_phoneNumber(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_person(RestF, 0, 0, F@_1, F@_2, F@_3,
			      cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_person(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_person(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       TrUserData);
skip_varint_person(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_person(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_length_delimited_person(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_person(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_person(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_person(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_group_person(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_person(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_32_person(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_person(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_64_person(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_person(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

decode_msg_addressBook(Bin, TrUserData) ->
    dfp_read_field_def_addressBook(Bin, 0, 0,
				   id([], TrUserData), id([], TrUserData),
				   TrUserData).

dfp_read_field_def_addressBook(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_addressBook_person1(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_addressBook(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_addressBook_others(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_addressBook(<<>>, 0, 0, R1, R2,
			       TrUserData) ->
    #addressBook{person1 = lists_reverse(R1, TrUserData),
		 others = lists_reverse(R2, TrUserData)};
dfp_read_field_def_addressBook(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_addressBook(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_addressBook(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_addressBook(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_addressBook(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_addressBook_person1(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      18 ->
	  d_field_addressBook_others(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_addressBook(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_addressBook(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_addressBook(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_addressBook(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_addressBook(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_addressBook(<<>>, 0, 0, R1, R2,
			      TrUserData) ->
    #addressBook{person1 = lists_reverse(R1, TrUserData),
		 others = lists_reverse(R2, TrUserData)}.

d_field_addressBook_person1(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_addressBook_person1(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_addressBook_person1(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_person(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_addressBook(RestF, 0, 0,
				   cons(NewFValue, Prev, TrUserData), F@_2,
				   TrUserData).

d_field_addressBook_others(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_addressBook_others(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_addressBook_others(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_person(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_addressBook(RestF, 0, 0, F@_1,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_addressBook(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_addressBook(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_addressBook(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_addressBook(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_addressBook(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_addressBook(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_addressBook(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_addressBook(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_addressBook(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_addressBook(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_addressBook(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_addressBook(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_addressBook(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_addressBook(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

decode_msg_tint32(Bin, TrUserData) ->
    dfp_read_field_def_tint32(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_tint32(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, TrUserData) ->
    d_field_tint32_int1(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_tint32(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, TrUserData) ->
    d_field_tint32_int2(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_tint32(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, TrUserData) ->
    d_field_tint32_int3(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_tint32(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, TrUserData) ->
    d_field_tint32_int4(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_tint32(<<40, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, TrUserData) ->
    d_field_tint32_int5(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_tint32(<<48, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, TrUserData) ->
    d_field_tint32_int6(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_tint32(<<56, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, TrUserData) ->
    d_field_tint32_int7(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_tint32(<<64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, TrUserData) ->
    d_field_tint32_int8(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_tint32(<<72, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, TrUserData) ->
    d_field_tint32_int9(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_tint32(<<80, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, TrUserData) ->
    d_field_tint32_int10(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_tint32(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _) ->
    #tint32{int1 = F@_1, int2 = F@_2, int3 = F@_3,
	    int4 = F@_4, int5 = F@_5, int6 = F@_6, int7 = F@_7,
	    int8 = F@_8, int9 = F@_9, int10 = F@_10};
dfp_read_field_def_tint32(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  TrUserData) ->
    dg_read_field_def_tint32(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     TrUserData).

dg_read_field_def_tint32(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_tint32(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, TrUserData);
dg_read_field_def_tint32(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_tint32_int1(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      16 ->
	  d_field_tint32_int2(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      24 ->
	  d_field_tint32_int3(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      32 ->
	  d_field_tint32_int4(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      40 ->
	  d_field_tint32_int5(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      48 ->
	  d_field_tint32_int6(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      56 ->
	  d_field_tint32_int7(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      64 ->
	  d_field_tint32_int8(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      72 ->
	  d_field_tint32_int9(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      80 ->
	  d_field_tint32_int10(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_tint32(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   TrUserData);
	    1 ->
		skip_64_tint32(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
	    2 ->
		skip_length_delimited_tint32(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					     F@_9, F@_10, TrUserData);
	    3 ->
		skip_group_tint32(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  TrUserData);
	    5 ->
		skip_32_tint32(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData)
	  end
    end;
dg_read_field_def_tint32(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _) ->
    #tint32{int1 = F@_1, int2 = F@_2, int3 = F@_3,
	    int4 = F@_4, int5 = F@_5, int6 = F@_6, int7 = F@_7,
	    int8 = F@_8, int9 = F@_9, int10 = F@_10}.

d_field_tint32_int1(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData)
    when N < 57 ->
    d_field_tint32_int1(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			TrUserData);
d_field_tint32_int1(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_tint32(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData).

d_field_tint32_int2(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData)
    when N < 57 ->
    d_field_tint32_int2(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			TrUserData);
d_field_tint32_int2(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_tint32(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData).

d_field_tint32_int3(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData)
    when N < 57 ->
    d_field_tint32_int3(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			TrUserData);
d_field_tint32_int3(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_tint32(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      F@_10, TrUserData).

d_field_tint32_int4(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData)
    when N < 57 ->
    d_field_tint32_int4(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			TrUserData);
d_field_tint32_int4(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_tint32(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData).

d_field_tint32_int5(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData)
    when N < 57 ->
    d_field_tint32_int5(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			TrUserData);
d_field_tint32_int5(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_tint32(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData).

d_field_tint32_int6(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData)
    when N < 57 ->
    d_field_tint32_int6(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			TrUserData);
d_field_tint32_int6(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9,
		    F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_tint32(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10,
			      TrUserData).

d_field_tint32_int7(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData)
    when N < 57 ->
    d_field_tint32_int7(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			TrUserData);
d_field_tint32_int7(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9,
		    F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_tint32(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10,
			      TrUserData).

d_field_tint32_int8(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData)
    when N < 57 ->
    d_field_tint32_int8(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			TrUserData);
d_field_tint32_int8(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9,
		    F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_tint32(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10,
			      TrUserData).

d_field_tint32_int9(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData)
    when N < 57 ->
    d_field_tint32_int9(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			TrUserData);
d_field_tint32_int9(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _,
		    F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_tint32(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10,
			      TrUserData).

d_field_tint32_int10(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, TrUserData)
    when N < 57 ->
    d_field_tint32_int10(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 TrUserData);
d_field_tint32_int10(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_tint32(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue,
			      TrUserData).

skip_varint_tint32(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, TrUserData) ->
    skip_varint_tint32(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
skip_varint_tint32(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, TrUserData) ->
    dfp_read_field_def_tint32(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData).

skip_length_delimited_tint32(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    skip_length_delimited_tint32(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, TrUserData);
skip_length_delimited_tint32(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_tint32(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData).

skip_group_tint32(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_tint32(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData).

skip_32_tint32(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
	       TrUserData) ->
    dfp_read_field_def_tint32(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData).

skip_64_tint32(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
	       TrUserData) ->
    dfp_read_field_def_tint32(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      test -> merge_msg_test(Prev, New, TrUserData);
      phoneNumber ->
	  merge_msg_phoneNumber(Prev, New, TrUserData);
      person -> merge_msg_person(Prev, New, TrUserData);
      addressBook ->
	  merge_msg_addressBook(Prev, New, TrUserData);
      tint32 -> merge_msg_tint32(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_test/3}).
merge_msg_test(#test{}, #test{aa = NFaa}, _) ->
    #test{aa = NFaa}.

-compile({nowarn_unused_function,merge_msg_phoneNumber/3}).
merge_msg_phoneNumber(#phoneNumber{number = PFnumber},
		      #phoneNumber{number = NFnumber, type = NFtype},
		      TrUserData) ->
    #phoneNumber{number =
		     merge_msg_test(PFnumber, NFnumber, TrUserData),
		 type = NFtype}.

-compile({nowarn_unused_function,merge_msg_person/3}).
merge_msg_person(#person{email = PFemail,
			 phone = PFphone},
		 #person{name = NFname, integer = NFinteger,
			 email = NFemail, phone = NFphone},
		 TrUserData) ->
    #person{name = NFname, integer = NFinteger,
	    email =
		if NFemail =:= undefined -> PFemail;
		   true -> NFemail
		end,
	    phone =
		if PFphone /= undefined, NFphone /= undefined ->
		       'erlang_++'(PFphone, NFphone, TrUserData);
		   PFphone == undefined -> NFphone;
		   NFphone == undefined -> PFphone
		end}.

-compile({nowarn_unused_function,merge_msg_addressBook/3}).
merge_msg_addressBook(#addressBook{person1 = PFperson1,
				   others = PFothers},
		      #addressBook{person1 = NFperson1, others = NFothers},
		      TrUserData) ->
    #addressBook{person1 =
		     if PFperson1 /= undefined, NFperson1 /= undefined ->
			    'erlang_++'(PFperson1, NFperson1, TrUserData);
			PFperson1 == undefined -> NFperson1;
			NFperson1 == undefined -> PFperson1
		     end,
		 others =
		     if PFothers /= undefined, NFothers /= undefined ->
			    'erlang_++'(PFothers, NFothers, TrUserData);
			PFothers == undefined -> NFothers;
			NFothers == undefined -> PFothers
		     end}.

-compile({nowarn_unused_function,merge_msg_tint32/3}).
merge_msg_tint32(#tint32{},
		 #tint32{int1 = NFint1, int2 = NFint2, int3 = NFint3,
			 int4 = NFint4, int5 = NFint5, int6 = NFint6,
			 int7 = NFint7, int8 = NFint8, int9 = NFint9,
			 int10 = NFint10},
		 _) ->
    #tint32{int1 = NFint1, int2 = NFint2, int3 = NFint3,
	    int4 = NFint4, int5 = NFint5, int6 = NFint6,
	    int7 = NFint7, int8 = NFint8, int9 = NFint9,
	    int10 = NFint10}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      test -> v_msg_test(Msg, [MsgName], TrUserData);
      phoneNumber ->
	  v_msg_phoneNumber(Msg, [MsgName], TrUserData);
      person -> v_msg_person(Msg, [MsgName], TrUserData);
      addressBook ->
	  v_msg_addressBook(Msg, [MsgName], TrUserData);
      tint32 -> v_msg_tint32(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_test/3}).
-dialyzer({nowarn_function,v_msg_test/3}).
v_msg_test(#test{aa = F1}, Path, TrUserData) ->
    v_type_string(F1, [aa | Path], TrUserData), ok;
v_msg_test(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, test}, X, Path).

-compile({nowarn_unused_function,v_msg_phoneNumber/3}).
-dialyzer({nowarn_function,v_msg_phoneNumber/3}).
v_msg_phoneNumber(#phoneNumber{number = F1, type = F2},
		  Path, TrUserData) ->
    v_msg_test(F1, [number | Path], TrUserData),
    v_type_int32(F2, [type | Path], TrUserData),
    ok;
v_msg_phoneNumber(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, phoneNumber}, X, Path).

-compile({nowarn_unused_function,v_msg_person/3}).
-dialyzer({nowarn_function,v_msg_person/3}).
v_msg_person(#person{name = F1, integer = F2,
		     email = F3, phone = F4},
	     Path, TrUserData) ->
    v_type_string(F1, [name | Path], TrUserData),
    v_type_int32(F2, [integer | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [email | Path], TrUserData)
    end,
    if is_list(F4) ->
	   _ = [v_msg_phoneNumber(Elem, [phone | Path], TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, phoneNumber}}, F4,
			 [phone | Path])
    end,
    ok;
v_msg_person(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, person}, X, Path).

-compile({nowarn_unused_function,v_msg_addressBook/3}).
-dialyzer({nowarn_function,v_msg_addressBook/3}).
v_msg_addressBook(#addressBook{person1 = F1,
			       others = F2},
		  Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_person(Elem, [person1 | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, person}}, F1,
			 [person1 | Path])
    end,
    if is_list(F2) ->
	   _ = [v_msg_person(Elem, [others | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, person}}, F2,
			 [others | Path])
    end,
    ok;
v_msg_addressBook(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, addressBook}, X, Path).

-compile({nowarn_unused_function,v_msg_tint32/3}).
-dialyzer({nowarn_function,v_msg_tint32/3}).
v_msg_tint32(#tint32{int1 = F1, int2 = F2, int3 = F3,
		     int4 = F4, int5 = F5, int6 = F6, int7 = F7, int8 = F8,
		     int9 = F9, int10 = F10},
	     Path, TrUserData) ->
    v_type_int32(F1, [int1 | Path], TrUserData),
    v_type_int32(F2, [int2 | Path], TrUserData),
    v_type_int32(F3, [int3 | Path], TrUserData),
    v_type_int32(F4, [int4 | Path], TrUserData),
    v_type_int32(F5, [int5 | Path], TrUserData),
    v_type_int32(F6, [int6 | Path], TrUserData),
    v_type_int32(F7, [int7 | Path], TrUserData),
    v_type_int32(F8, [int8 | Path], TrUserData),
    v_type_int32(F9, [int9 | Path], TrUserData),
    v_type_int32(F10, [int10 | Path], TrUserData),
    ok;
v_msg_tint32(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, tint32}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, test},
      [#field{name = aa, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, phoneNumber},
      [#field{name = number, fnum = 1, rnum = 2,
	      type = {msg, test}, occurrence = required, opts = []},
       #field{name = type, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, person},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = integer, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = email, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = phone, fnum = 4, rnum = 5,
	      type = {msg, phoneNumber}, occurrence = repeated,
	      opts = []}]},
     {{msg, addressBook},
      [#field{name = person1, fnum = 1, rnum = 2,
	      type = {msg, person}, occurrence = repeated, opts = []},
       #field{name = others, fnum = 2, rnum = 3,
	      type = {msg, person}, occurrence = repeated,
	      opts = []}]},
     {{msg, tint32},
      [#field{name = int1, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = int2, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = int3, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = int4, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = int5, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []},
       #field{name = int6, fnum = 6, rnum = 7, type = int32,
	      occurrence = required, opts = []},
       #field{name = int7, fnum = 7, rnum = 8, type = int32,
	      occurrence = required, opts = []},
       #field{name = int8, fnum = 8, rnum = 9, type = int32,
	      occurrence = required, opts = []},
       #field{name = int9, fnum = 9, rnum = 10, type = int32,
	      occurrence = required, opts = []},
       #field{name = int10, fnum = 10, rnum = 11, type = int32,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    [test, phoneNumber, person, addressBook, tint32].


get_group_names() -> [].


get_msg_or_group_names() ->
    [test, phoneNumber, person, addressBook, tint32].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(test) ->
    [#field{name = aa, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def(phoneNumber) ->
    [#field{name = number, fnum = 1, rnum = 2,
	    type = {msg, test}, occurrence = required, opts = []},
     #field{name = type, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(person) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = integer, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = email, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = phone, fnum = 4, rnum = 5,
	    type = {msg, phoneNumber}, occurrence = repeated,
	    opts = []}];
find_msg_def(addressBook) ->
    [#field{name = person1, fnum = 1, rnum = 2,
	    type = {msg, person}, occurrence = repeated, opts = []},
     #field{name = others, fnum = 2, rnum = 3,
	    type = {msg, person}, occurrence = repeated,
	    opts = []}];
find_msg_def(tint32) ->
    [#field{name = int1, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = int2, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = int3, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = int4, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = int5, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []},
     #field{name = int6, fnum = 6, rnum = 7, type = int32,
	    occurrence = required, opts = []},
     #field{name = int7, fnum = 7, rnum = 8, type = int32,
	    occurrence = required, opts = []},
     #field{name = int8, fnum = 8, rnum = 9, type = int32,
	    occurrence = required, opts = []},
     #field{name = int9, fnum = 9, rnum = 10, type = int32,
	    occurrence = required, opts = []},
     #field{name = int10, fnum = 10, rnum = 11, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"test">>) -> test;
fqbin_to_msg_name(<<"phoneNumber">>) -> phoneNumber;
fqbin_to_msg_name(<<"person">>) -> person;
fqbin_to_msg_name(<<"addressBook">>) -> addressBook;
fqbin_to_msg_name(<<"tint32">>) -> tint32;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(test) -> <<"test">>;
msg_name_to_fqbin(phoneNumber) -> <<"phoneNumber">>;
msg_name_to_fqbin(person) -> <<"person">>;
msg_name_to_fqbin(addressBook) -> <<"addressBook">>;
msg_name_to_fqbin(tint32) -> <<"tint32">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "mytest.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["mytest.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["mytest"].


get_msg_containment("mytest") ->
    [addressBook, person, phoneNumber, test, tint32];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("mytest") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("mytest") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("mytest") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("mytest") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"tint32">>) -> "mytest";
get_proto_by_msg_name_as_fqbin(<<"phoneNumber">>) -> "mytest";
get_proto_by_msg_name_as_fqbin(<<"test">>) -> "mytest";
get_proto_by_msg_name_as_fqbin(<<"addressBook">>) -> "mytest";
get_proto_by_msg_name_as_fqbin(<<"person">>) -> "mytest";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.8.0".

gpb_version_as_list() ->
    [4,8,0].
